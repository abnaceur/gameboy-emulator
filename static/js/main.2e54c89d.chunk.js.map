{"version":3,"sources":["logo.svg","MainPage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainPage","props","state","stats","loading","formatData","bind","getData","this","setState","axios","get","headers","then","response","console","log","data","countries_stat","setTimeout","results","forEach","d","i","push","key","country_name","cases","deaths","region","total_recovered","new_deaths","new_cases","serious_critical","pagination","filters","sorter","extra","className","style","color","class","type","size","onClick","width","height","viewBox","data-rotation","columns","title","dataIndex","compare","a","b","multiple","dataSource","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2e54c89d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport axios from 'axios';\nimport 'antd/dist/antd.css';\nimport { Table, Button, Radio } from 'antd';\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            stats: [],\n            loading: false,\n        }\n\n        this.formatData = this.formatData.bind(this);\n        this.getData = this.getData.bind(this);\n    }\n\n    componentWillMount() {\n        this.getData();\n    }\n\n    getData() {\n        this.setState({\n            loading: true\n        })\n        axios.get('https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_country.php', {\n            headers: {\n                \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\n                \"x-rapidapi-key\": \"2d5e7d364bmsh34d1e7f42c80f82p11c151jsne40f5507290e\"\n            }\n        }).then(response => {\n            console.log(\"Response :\", response.data.countries_stat);\n            this.formatData(response.data.countries_stat);\n            setTimeout(() => {\n                this.setState({\n                    loading: false\n                })\n            }, 500)\n        })\n    }\n\n    formatData(data) {\n        let results = [];\n        data.forEach((d, i) => {\n            results.push({\n                key: i,\n                country_name: d.country_name,\n                cases: d.cases,\n                deaths: d.deaths,\n                region: d.region,\n                total_recovered: d.total_recovered,\n                new_deaths: d.new_deaths,\n                new_cases: d.new_cases,\n                serious_critical: d.serious_critical,\n            })\n        })\n\n        console.log(\"results :\", results);\n        this.setState({\n            stats: results\n        })\n    }\n\n    onChange(pagination, filters, sorter, extra) {\n        console.log('params', pagination, filters, sorter, extra);\n    }\n\n    render() {\n        const columns = [\n            {\n                title: 'country name',\n                dataIndex: 'country_name',\n            },\n            {\n                title: 'Cases',\n                dataIndex: 'cases',\n                sorter: {\n                    compare: (a, b) => a.cases - b.cases,\n                },\n            },\n            {\n                title: 'Total recovered',\n                dataIndex: 'total_recovered',\n                sorter: {\n                    compare: (a, b) => a.total_recovered - b.total_recovered,\n                },\n            },\n            {\n                title: 'Deaths',\n                dataIndex: 'deaths',\n                sorter: {\n                    compare: (a, b) => a.deaths - b.deaths,\n                },\n            },\n            {\n                title: 'Region',\n                dataIndex: 'region',\n            },\n            {\n                title: 'New deaths',\n                dataIndex: 'new_deaths',\n                sorter: {\n                    compare: (a, b) => a.new_deaths - b.new_deaths,\n                },\n            },\n            {\n                title: 'New cases',\n                dataIndex: 'new_cases',\n                sorter: {\n                    compare: (a, b) => a.new_cases - b.new_cases,\n                    multiple: 1,\n                },\n            },\n            {\n                title: 'Serious critical',\n                dataIndex: 'serious_critical',\n                sorter: {\n                    compare: (a, b) => a.serious_critical - b.serious_critical,\n                    multiple: 1,\n                },\n            },\n        ];\n\n        const size = \"large\";\n\n        return (\n            <div className=\"body-wrap\">\n                <header className=\"site-header\">\n                    <div className=\"container\">\n                        <div className=\"site-header-inner\">\n                            <div className=\"brand header-brand\">\n                                <h1 style={{ color: 'white' }} className=\"hero-title mt-0\">\n                                    COVID-19 STATS\n                                </h1>\n                            </div>\n                        </div>\n                    </div>\n                </header>\n\n                <main>\n                    <section className=\"hero\">\n                        <div className=\"container\">\n                            <div className=\"hero-inner\">\n\n                                <div class=\"hero-copy\" style={{ color: 'white' }}>\n                                    <h1 style={{ color: 'white' }} className=\"hero-title mt-0\">Real time tracker</h1>\n                                    <Button\n                                        type=\"primary\"\n                                        size={size}\n                                        loading={this.state.loading}\n                                        onClick={this.getData}\n                                    > Refresh results</Button>\n\n                                </div>\n\n                                <div className=\"hero-figure anime-element\">\n                                    <svg className=\"placeholder\" width=\"528\" height=\"396\" viewBox=\"0 0 528 396\">\n                                        <rect width=\"528\" height=\"396\" style={{ 'fill': 'transparent' }} />\n                                    </svg>\n                                    <div className=\"hero-figure-box hero-figure-box-01\" data-rotation=\"45deg\"></div>\n                                    <div className=\"hero-figure-box hero-figure-box-02\" data-rotation=\"-45deg\"></div>\n                                    <div className=\"hero-figure-box hero-figure-box-03\" data-rotation=\"0deg\"></div>\n                                    <div className=\"hero-figure-box hero-figure-box-04\" data-rotation=\"-135deg\"></div>\n                                    <div className=\"hero-figure-box hero-figure-box-05\"></div>\n                                    <div className=\"hero-figure-box hero-figure-box-06\"></div>\n                                    <div className=\"hero-figure-box hero-figure-box-07\"></div>\n                                    <div className=\"hero-figure-box hero-figure-box-08\" data-rotation=\"-22deg\"></div>\n                                    <div className=\"hero-figure-box hero-figure-box-09\" data-rotation=\"-52deg\"></div>\n                                    <div className=\"hero-figure-box hero-figure-box-10\" data-rotation=\"-50deg\"></div>\n                                </div>\n                            </div>\n                        </div>\n                        <Table columns={columns} dataSource={this.state.stats} onChange={this.onChange} />\n                    </section>\n\n                    <section className=\"features section\">\n                    </section>\n                </main>\n            </div>\n        )\n    }\n} ","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MainPage from './MainPage';\nimport 'antd/dist/antd.css';\n\nfunction App() {\n  return (\n    <MainPage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}